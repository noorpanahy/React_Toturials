1:  components
    Header components
        Header.jsx
    Food components
        Food.jsx
    Footer components
        Footer.jsx
    card components  
        card.jsx
2:  Buttons
        Buttons design 
            External css    index.css
            Modules css     new folder and add new component for css
            Inline css      In same File
3:  Props
        adding in chiled object and use it from parent
        PropTypes Variables
        Prop Defult Value
            Prop.jsx
4:  conditional Rendering on Props
        UserGreating.jsx
5:  Lists
        List.jsx
6:  user click handler on Buttons
        buttons reaction
            on click we have output
        profile_pic
            on click we have some style features that is display none
7:  React Hooks (useState)
    it has two components
        variable
        update or set varibale
8:  OnChange (event Handler)
        <input>, <textarea>, <select> and <radio>
9:  Color Picker
10: Updater Function
        we use updater function to pass variable ( argument )
11: useEffect
    // useEffect() = React Hook that tells React to DO THIS CODE WHEN (pick one):
        This component re-renders
        This component mounts
        The state of a value
    useEffect(function, [dependencies])
        1. useEffect(() => {})   Runs after every re-render
        2. useEffect(() => {}, [])   Runs only on mount
        3. useEffect(() => {}, (value))   Runs on mount + when value changes
    USES
        #1 Event Listeners
        #2 DOM manipulation
        #3 Subscriptions (real-time updates)
        #4 Fetching Data from an API
        #5 Clean up when a component unmounts
12: useContext() =  React Hook that allows you to share values
                    between multiple levels of components
                    without passing props through each level
        PROVIDER COMPONENT
            1. import {createContext} from 'react';
            2. export const MyContext = createContext();
            3. <MyContext.Provider value={value}>
                <Child />
                </MyContext.Provider>
        CONSUMER COMPONENTS
            1.  import React, { useContext } from 'react';   
                import { MyContext } from './ComponentA';
            2. const value = useContext(MyContext);
13: useState() Re-renders the component when the state value changes
        useRef()= "use Reference" Does not cause re-renders when its value changes.
            1. Accessing/Interacting with DOM elements
            2. Handling Focus, Animations, and Transitions
            3. Managing Timers and Intervals